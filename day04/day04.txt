투 포인터 알고리즘 O(N)

tmp = 0;
start/left
ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ
end/right

기준 값을 기준으로 그것보다 작으면 r 을 움직이고 그 값을 임시변수에 누적하여 더함
누적값이 기준값보다 크면 l 이 이동하면서 누적값에서 그 값을 제외함.
누적값과 기준값이 같은 경우를 체크 함. 그리고 l 을 이동함.

이를 컨테이너 끝까지 반복함.

r = n 일 때 누적값이 기준값보다 작으면 종료함.

응용
l과 r 이 각기 마주보면서 검사할 수 도 있음.


회문 검사
is_palindrome = False

if word == word[::-1]:
    is_palindrome = True

print(is_palindrome)

투 포인터를 사용한 회문 검사 (투포인터 응용한 풀이)
is_palindrome = True
l=0
r=len(word)-1

while l<r:
    if word[l] != word[r]:
        is_palindrome = False
        break
    l += 1
    r -= 1

print(is_palindrome)

-------------------------------------------------------------
정렬 알고리즘
1. 정렬의 종류
    1) 불안정 정렬 = 선택, 퀵 O(NlnN) => Timsort (파이썬 정렬법)
        [2, 2', 1, 3] => [1, 2, 2*, 3] or [1, 2*, 2, 3]

    2) 안정 정렬 (2 다음에 2* 오는 것이 보장 됨.) = 버블, 카운팅, 병합
        [2, 2*, 1, 3] => [1, 2, 2*, 3]

2. 버블 정렬 O(N^2)
    두 수롤 비교하면서 작은 수를 앞으로 보냄. 1회 비교시 가장 마지막은 가장 큰 수가 있음.
    같으면 변화가 없기 때문에 안정 정렬이 됨.

3. 선택 정렬 O(N^2)

4. 카운팅 정렬 O(N+K) => K 는 N 보다 큰 경우

--------------------------------------------------------------
이진탐색 / 이분탐색 : 정렬을 사용한 알고리즘
- 정렬이 되어 있음을 담보로 함.
- O(lnN)

--------------------------------------------------------------
이중 행렬
arr = [[3,7,9],
       [4,2,6],
       [8,1,5]]
print(arr[2][2])
# 행 먼저 그 다음에 열
print("가로 => 행 기준 출력")
for i in range(len(arr)):
    for j in range(len(arr[i])):
        print(arr[i][j])
     

print("세로 => 열 기준 출력")
for j in range(len(arr)):
    for i in range(len(arr[i])):
        print(arr[i][j])


print("전치=> ")
for i in range(len(arr)):
    for j in range(len(arr[i])):
        if i != j :
            arr[i][j] = arr[j][i]

print(arr)

전치 함수 => zip