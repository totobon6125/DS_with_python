1. 재귀함수
  - 함수 안의 함수를 넣는 것
  def recursion_func():
    i = 0
    print('안녕 난 재귀함수야~')
    i++
    if (i == 3):
      return "재귀함수 끝"
    recursion_func()

  recursion_func()

3번 함수가 스택에 쌓임
5번 함수가 스택에 쌓임
5번 안의 5번 함수가 스택에 쌓음
...

그런식으로 시스템 스택 이라는 곳에 함수의 실행이 쌓음.
스택 오버플로가 발생하면 함수의 작동을 중지함.

--------------------------------------------------------

재귀함수로 피보나치를 접근할 경우 N 이 어디까지인가에 따라서 풀 수도 있고 못 풀 수도 있다.
풀 수 없을 때는 메모리제이션 방식을 사용하면 풀 수 있다.

- 분할 정복 => NlgN
ex. 정렬문제

-- 병합정렬 vs 버블정렬
전체를 반으로, 그 반을 다시 반으로, 또 반으로...나눌 수 없을 때 까지

[2 8] [3 1] [6 5] [4 3]
2 8 '1 3' 6 5 4 3
2 8 '1 3' '5 6' 4 3
2 8 '1 3' '5 6' '3 4'

[28 13] [56 34]
1283 3564
1238 3456
1) 분할
1.5) 처리
2) 병합 -> 투포인트롤 통해 합쳐짐.


---------------------------------------------------------------------------------
그래프!!!!!

정점(Vertax) = 노드
간선(E)

유향(=방향) 그래프
- 방향성이 있는 그래프
무향 그래프
- 연결이 되면 양방향 개통이 되는 그래프
밀집 그래프
- 노드간 간선 연결이 많음 됨
희소 그래프
- 노드 간 간선이 연결이 적음
완전 그래프
- 노드 간 간선이 전부 연결됨

간선에 가중치를 부여할 수 도 있음.

형태
- 일반 그래프 형태 -> 근데 구조화 하면 이차원 리스트 형태가 됨.
- 이차원 그래프 형태
  => 유사한 형태지만 다른 방향으로 접근 해야 함!!

1) 일반 그래프 형태
0---2
|  / \
| /   \
1      3
- 2차원 행렬로 만듬
  | 0 1 2 3
-------------
0 | 0 1 1 0
1 | 1 0 1 0
2 | 1 1 0 1
3 | 0 0 1 1

조회를 통해 노드 간의 길이 연결되었는지를 확인함.
ajd[][] = 1 or 0


- 리스트로 만듬
[
0 [1, 2] => 0 에 1 과 2 를 갈 수 있음
1 [0, 2]
2 [0, 1, 3]
3 [2] 
]

- 장단점
길이 있는지 확인할 땐 '행렬'이 유리함.
노드를 기준으로 연결된 길을 확인할 땐 '리스트' 가 유리함.

-------------------------------------------------------------
DFS, BFS
1. 무지성 방문 => 깊이 우선 탐색
2. 탐색 과 방문을 분리 => 너비 우선 탐색

    1
   / \
  2   3
 / \   \
4   5   |
\  /    |
 6------7

DFS 1 2 4 6 7 5 3

BFS 1 2 3 4 5 7 6 
  1번에서 갈 수 있는 곳을 탐색 (2, 3) 이를 Q = [2, 3] 라는 자료구조에 저장함.
  Q에서 2 가 나와서 2를 방문 4, 5 를 탐색하여 Q 에 저장함 Q = [3, 4, 5]
  ...

* queue
    방출     [ ... ]    입력
  queue.pop(0)  -  queue.append()
                      2, 3
      2               3, 4, 5
      3               4, 5, 7
      4               5, 7, 6
      5               7, 6
      7               6
      6

stack => 규칙(큰수부터 탐색)을 정함.
1 - 2 - 4 - 6 - 7 - 5 - 3
1 번 부터 시작
s = [3, 2]
2 번 방문
s = [3, 5, 4]
4 번 방문
s = [3, 5, 6]
6 번 방문
s = [3, 5, 7]
7 번 방문
s = [3, 5]
5 번 방문
s = [3]
3 번 방문

-----------------------------------
재귀를 통한 DFS 만들기
1 - 2 - 4 - 6 - 7 - 3 - 5 ??
1번에서 for 를 통해 방문할 수 있는 곳을 탐색
1번에서 3번 가기전에 2번으로 빠짐
2번에서 for 를 통해 찾지만 4번으로 빠짐